name: Profile app actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REGISTRY }}
  EKS_CLUSTER: project-1

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository  # Path to the local Maven cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Cache key based on pom.xml files
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Test
        run: mvn test
      - name: Set up java 11
        uses: actions/setup-java@v4
        with: 
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: sonar-scanner
        uses: Warchant/setup-sonar-scanner@v8

      - name: Run sonar-scanner
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junits.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportsPath=target/checkstyle-results.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      # - name: SonarQube Quality Gate Check
      #   uses: SonarSource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
  Build_and_deploy_to_ECR:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY_URI }}
          repo: ${{ secrets.ECR_REPO }}
          region: ${{ env.AWS_REGION }}
          auto_tag: true
          daemon_off: false
          dockerfile: ./Dockerfile
          context: /
                    